//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ETraining
{
	public class ErrorLogManager
	{
		/// <summary>
		/// The list error log.
		/// </summary>
		public static List<ErrorLog> listErrorLog = new List<ErrorLog>();
		/// <summary>
		/// The error flag.
		/// </summary>
		public static bool errorFlag = false;
		/// <summary>
		/// The normal error log.
		/// </summary>
		public static string normalErrorLog = "";
		/// <summary>
		/// The warning log.
		/// </summary>
		public static string warningLog = "";
		/// <summary>
		/// The critical error log.
		/// </summary>
		public static string criticalErrorLog = "";
		/// <summary>
		/// Creates the error log.
		/// </summary>
		/// <returns>The error log.</returns>
		public static ErrorLog createErrorLog() {
			ErrorLog newErrorLog = new ErrorLog(listErrorLog.Count());
			return newErrorLog;
		}
		/// <summary>
		/// Adds the error log.
		/// </summary>
		/// <param name="errorLog">Error log.</param>
		public static void addErrorLog(ErrorLog errorLog) {
			listErrorLog.Add(errorLog);
		}
		/// <summary>
		/// Removes the error log.
		/// </summary>
		/// <param name="errorLog">Error log.</param>
		public static void removeErrorLog(ErrorLog errorLog) {
			for (int i = (errorLog.IdLog + 1); i <= listErrorLog.Count(); i++) {
				listErrorLog[i].IdLog -= 1;
			}
			listErrorLog.Remove(errorLog);
		}
		/// <summary>
		/// Gets the error log.
		/// </summary>
		/// <returns>The error log.</returns>
		/// <param name="id">Identifier.</param>
		public static ErrorLog getErrorLog(int id) {
			return listErrorLog[id];
		}
		/// <summary>
		/// Updates the error log.
		/// </summary>
		/// <param name="errorLog">Error log.</param>
		public static void updateErrorLog(ErrorLog errorLog) {
			listErrorLog[errorLog.IdLog] = errorLog;
		}
		/// <summary>
		/// Resets the log.
		/// </summary>
		public static void resetLog() {
			normalErrorLog = "";
			warningLog = "";
			criticalErrorLog = "";
			listErrorLog.Clear();
			errorFlag = false;
		}
		/// <summary>
		/// Exports the normal log.
		/// </summary>
		public static void exportNormalLog() {
			string logText = "";
			foreach (ErrorLog log in listErrorLog) {
				logText = "";
				switch (log.TypeLog) {
				case 1:
					criticalErrorLog = log.ContentLog;
					break;
				case 2:
					logText += "Error: ";
					logText += log.ContentLog + ". ";
					normalErrorLog += logText;
					break;
				case 3:
					logText += "Warning: ";
					logText += log.ContentLog + ". ";
					warningLog += logText;
					break;
				default:
				break;
				}
			}
		}
	}
}

